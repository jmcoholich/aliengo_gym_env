    def _get_heightmap(self):
        '''Debug flag enables printing of labeled coordinates and measured heights to rendered simulation. 
        Uses the "fake_client" simulation instance in order to avoid robot collisions
        TODO put this into the aliengo class'''

        debug = False
        show_xy = False

        if self._debug_ids != []: # remove the exiting debug items
            for _id in self._debug_ids:
                self.client.removeUserDebugItem(_id)
            self._debug_ids = []

        base_x = self.base_position[0]
        base_y = self.base_position[1]
        base_z = self.base_position[2]


        x = np.linspace(0, self.length, self.grid_len)
        y = np.linspace(-self.length/2.0, self.length/2.0, self.grid_len)
        coordinates = np.array(np.meshgrid(x,y))
        coordinates[0,:,:] += base_x - self.robot_position
        coordinates[1,:,:] += base_y  
        # coordinates has shape (2, self.grid_len, self.grid_len)
        coor_list = coordinates.reshape((2, self.grid_len**2)).swapaxes(0, 1) # is now shape (self.grid_len**2,2) 
        ray_start = np.append(coor_list, np.ones((self.grid_len**2, 1)) * \
                                                    (self.terrain_height + self.terrain_height_range/2. + 1.), axis=1)
        ray_end = np.append(coor_list, np.zeros((self.grid_len**2, 1)) - 1, axis=1)
        raw_output = self.fake_client.rayTestBatch(ray_start, ray_end) 
        z_heights = np.array([raw_output[i][3][2] for i in range(self.grid_len**2)])
        relative_z_heights = z_heights - base_z

        if debug:
            # #print xy coordinates of robot origin 
            # _id = self.client.addUserDebugText(text='%.2f, %.2f'%(base_x, base_y),
            #             textPosition=[base_x, base_y,self.hills_height+1],
            #             textColorRGB=[0,0,0])
            # self._debug_ids.append(_id)
            for i in range(self.grid_len):
                for j in range(self.grid_len):
                    if show_xy:
                        text = '%.2f, %.2f, %.2f'%(coordinates[0,i,j], coordinates[1,i,j], z_heights.reshape((self.grid_len, self.grid_len))[i,j])
                    else:
                        text = '%.2f'%(z_heights.reshape((self.grid_len, self.grid_len))[i,j])
                    _id = self.client.addUserDebugText(text=text,
                                            textPosition=[coordinates[0,i,j], coordinates[1,i,j],self.terrain_height+0.5],
                                            textColorRGB=[0,0,0])
                    self._debug_ids.append(_id)
                    _id = self.client.addUserDebugLine([coordinates[0,i,j], coordinates[1,i,j],self.terrain_height+0.5],
                                            [coordinates[0,i,j], coordinates[1,i,j], 0],
                                            lineColorRGB=[0,0,0] )
                    self._debug_ids.append(_id)
        
        return relative_z_heights.reshape((self.grid_len, self.grid_len))